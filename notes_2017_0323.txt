############ multiplot ############
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
################

library("phyloseq") #packageVersion("phyloseq")
library("ggplot2") #packageVersion("ggplot2")
library("ape") #packageVersion("ape")
setwd("~/Desktop/2017_0323/")

taxdata <- read.csv("table_tax.csv", header = TRUE, row.names = 1) # reads csv file into data.frame with row names in column 1
taxmat <- as.matrix.data.frame(taxdata) # reads data.frame into matrix without converting to numbers
otudata <- read.csv("table_otu.csv", header = TRUE, row.names = 1)
otumat <- as.matrix.data.frame(otudata)
mapdata <- read.csv("table_map.csv", header = TRUE, row.names = 1)
# mapmat <- as.matrix.data.frame(mapdata)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
MAP = sample_data(data.frame(mapdata)) #######
TREE = read.tree("Rep_Set_tree.tree")
physeq = phyloseq(OTU, TAX, MAP, TREE)

theme_set(theme_bw())
pal = "Paired"
scale_colour_discrete <-  function(palname=pal, ...){
  scale_colour_brewer(palette=palname, ...)
}
scale_fill_discrete <-  function(palname=pal, ...){
  scale_fill_brewer(palette=palname, ...)
}

physeqR <- physeq # Save original version of un-manipulated data
physeq <- prune_samples(sample_sums(physeq) > 5000, physeq) # keep only samples with >5000 reads

clean2 <- subset_samples(physeq, !MealLot1%in%c("S-N3095","15B52072")) # Remove samples from contaminated blood lots
clean <- subset_samples(clean2, !MealLot2%in%c("S-N3095","15B52072")) # Remove samples from contaminated blood lots
ILF <- subset_samples(clean, SampleSite%in%c("ILF","Albumen")) # Only look at ILF and albumen samples
ILFj <- subset_samples(ILF, Age%in%c("J"))

most_abundant_taxaI <- sort(taxa_sums(ILFj), TRUE)[1:25] # Identify 25 most abundant taxa
pruneI <- prune_taxa(names(most_abundant_taxaI),ILFj) # remove all but 25 most abundant taxa
familyI <- tax_glom(pruneI, taxrank = "Family") # Combine OTUs at family level
transformI <- transform_sample_counts(familyI, function(OTU) OTU/sum(OTU) ) # transform raw reads to percentage
halo <- subset_taxa(transformI, Family == "Halomonadaceae") # create list of Halomonadaceae in samples
haloPrune = prune_samples(sample_sums(halo)>=.01, transformI) # Remove any samples with <= .5% Halomonadaceae (50/10000)

plot_bar(haloPrune,fill="Order",facet_grid=DateDNAExtract~.)
plot_bar(haloPrune,fill="Order",facet_grid=DateHatch~.) # Animals hatched in 2014 contain Oceanospirillales
plot_bar(haloPrune,fill="Order",facet_grid=RunDate~.)
plot_bar(haloPrune,fill="Order",facet_grid=Cocoon~.)
plot_bar(haloPrune,fill="Order",facet_grid=ParentLot~.)
plot_bar(haloPrune,fill="Order",facet_grid=Source~.)
plot_bar(haloPrune,fill="Order",facet_grid=DateSacrifice~.)
plot_bar(haloPrune,fill="Order",facet_grid=MealLot1~.)
plot_bar(haloPrune,fill="Order",facet_grid=MealLot2~.)
plot_bar(haloPrune,fill="Order",facet_grid=Da1F~.)
plot_bar(haloPrune,fill="Order",facet_grid=Treatment~.)

### Halomonas appear to be true members of the community and not sampling artifacts ###

########## Aeromonas in Water Colonizes ##########
aero <- subset_samples(ILFj, Treatment%in%c("AeroWater2","AeroWater3","AeroWater4","AeroWater5","AeroWater6"))
aero4 <- subset_samples(aero, Da1F%in%c("4"))
familyI <- tax_glom(aero4, taxrank = "Family") # Combine OTUs at family level
most_abundant_taxaI <- sort(taxa_sums(familyI), TRUE)[1:12] # Identify 12 most abundant taxa
pruneI <- prune_taxa(names(most_abundant_taxaI),familyI) # remove all but 12 most abundant taxa
transformI <- transform_sample_counts(pruneI, function(OTU) OTU/sum(OTU) ) # transform raw reads to percentage

aw <- plot_bar(transformI, x="Number", fill="Family",facet_grid=~Treatment) + expand_limits(y=c(0,1)) + labs(title = "Aeromonas in Tank Water") + theme(axis.text.x=element_blank(),axis.title.x=element_blank(),legend.title=element_blank())
pdf(file = "aero_water.pdf", width = 8, height = 4)
plot(aw) 
dev.off()
########## Aeromonas in Water Colonizes ##########

########## Aeromonas Fed ##########
fed <- subset_samples(ILFj, Treatment%in%c("AeroFed"))
fedC <- subset_samples(fed, !Da2F%in%c("2","7"))
familyI <- tax_glom(fedC, taxrank = "Family") # Combine OTUs at family level
most_abundant_taxaI <- sort(taxa_sums(familyI), TRUE)[1:12] # Identify 12 most abundant taxa
pruneI <- prune_taxa(names(most_abundant_taxaI),familyI) # remove all but 12 most abundant taxa
transformI <- transform_sample_counts(pruneI, function(OTU) OTU/sum(OTU) ) # transform raw reads to percentage
plot_bar(transformI,fill="Family")
########## Aeromonas Fed ##########

juv <- subset_samples(ILFj, Treatment%in%c("1Feed","2Feeds"))
fresh <- subset_samples(juv, sample_names(juv) != "j2d2F020715EMc.iD70" & sample_names(juv) != "j4dF083015EMb.iD434" & sample_names(juv) != "j4dF083015EMc.iD435") # remove 3 outlier samples with Aeromonas
familyI <- tax_glom(fresh, taxrank = "Family") # Combine OTUs at family level
most_abundant_taxaI <- sort(taxa_sums(familyI), TRUE)[1:12] # Identify 12 most abundant taxa
pruneI <- prune_taxa(names(most_abundant_taxaI),familyI) # remove all but 12 most abundant taxa
transformI <- transform_sample_counts(pruneI, function(OTU) OTU/sum(OTU) ) # transform raw reads to percentage
plot_bar(transformI,fill="Family",facet_grid=Da1F~.)

plot_bar(transformI,fill="Family",facet_grid=Source~.)

transform1 <- subset_samples(transformI, Treatment%in%c("1Feed"))
sample_data(transform1)$Da1F = factor(sample_data(transform1)$Da1F, levels = c(0,1,2,4,7,14,28)) # Reorder Da1F
transformSmall <- subset_samples(transform1,Da1F%in%c(0,1,2,4,7))
plot_bar(transformSmall,fill="Family",facet_grid=Da1F~.)

# # # Need to increase n for AeroWater5 # # #

