# To save space on HardDrive, I have stopped copying all files between process-date folders. Instead, one folder labeled "DataFiles" should be moved between processing folders. notes will be labeled with date and kept in a "Compiled_Rnotes" folder #

library("phyloseq") #packageVersion("phyloseq")
library("ggplot2") #packageVersion("ggplot2")
library("ape") #packageVersion("ape")
library("RColorBrewer")
source("~/Masters/R_tools/taxa_summary",local=TRUE) # load fast_melt function

setwd("~/Desktop/2017_0411/")

taxdata <- read.csv("DataFiles/table_tax.csv", header = TRUE, row.names = 1) # reads csv file into data.frame with row names in column 1
taxmat <- as.matrix.data.frame(taxdata) # reads data.frame into matrix without converting to numbers
otudata <- read.csv("DataFiles/table_otu.csv", header = TRUE, row.names = 1)
otumat <- as.matrix.data.frame(otudata)
mapdata <- read.csv("DataFiles/table_map.csv", header = TRUE, row.names = 1)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
MAP = sample_data(data.frame(mapdata)) #######
TREE = read.tree("DataFiles/Rep_Set_tree.tree")

# Add new column to map data. 'test' column will be used for juvenile interaction comparisons
MAP$test <- with(MAP, 
  ifelse(Treatment=="1Feed", "Juvenile", 
  ifelse(Treatment=="2Feeds", "Juvenile", 
  ifelse(Treatment=="USAjuv", "+Adults", 
  ifelse(Treatment=="USAadult", "+Adults", 
  ifelse(Treatment=="USAcontrol", "Adults",
  ifelse(Treatment=="BBEZadults", "+Adults", 
  ifelse(Treatment=="BBEZcontrol", "Adults",
  ifelse(Treatment=="USArock", "+Rock", 
  ifelse(Treatment=="UnfilteredWater", "+Water", 
  ifelse(Experiment=="Hatch", "Hatch", 
  as.character(Treatment))))))))))))

physeq = phyloseq(OTU, TAX, MAP, TREE)

save(physeq,file=("DataFiles/physeq_2017_0411.RData")) # Save the phyloseq data object in a .RData file 
system.time(load("DataFiles/physeq_2017_0411.RData")) # Use to re-load saved phyloseq data object

########## Pre-process data ##########
physeq5 <- prune_samples(sample_sums(physeq) > 5000, physeq) # keep only samples with > 5000 sequences

# Remove 'noise' OTus 
mdt = fast_melt(physeq5) # create table data frame from phyloseq object
prevdt = mdt[, list(Prevalence = sum(count > 0), 
   TotalCounts = sum(count)),
   by = TaxaID] # make simple table listing 'SampleID, TaxaID, and count' 
keepTaxa = prevdt[(Prevalence >= 3 & TotalCounts > 100), TaxaID] # Make list of OTUs to keep (cut-off determined 3/28 from histogram analysis)
physeqPr = prune_taxa(keepTaxa, physeq5) # Prune taxa from list

#Subset samples
ILF <- subset_samples(physeqPr, SampleSite=="ILF") # Only look at ILF samples
clean0 <- subset_samples(ILF, !MealLot1%in%c("S-N3095","15B52072")) # Remove samples from contaminated blood lots
clean <- subset_samples(clean0, !MealLot2%in%c("S-N3095","15B52072")) # Remove samples from contaminated blood lots
jtreat <- subset_samples(clean, test%in%c("+Adults","+Water","+Rock")) # subset samples to only treated juveniles 
contreat <- subset_samples(clean, test%in%c("Adults","Juvenile","Hatch")) # subset samples for treatment control set

old <- subset_samples(clean, Age%in%c("A")) # subset the adults 
young <- subset_samples(clean, !Age%in%c("A")) # subset the cocoons, hatchlings, and juveniles
o.con <- subset_samples(old, !Treatment%in%c("AnaFeed","MacroAdults")) # control group includes all adults except those fed Anaplasma and Macrobdella
y.con <- subset_samples(young, Treatment%in%c("Control","Cocoon","1Feed","2Feeds")) # control juveniles, hatchlings, and cocoons
hatch <- subset_samples(y.con,!DaH%in%c(7))
control <- merge_phyloseq(o.con, hatch) # Create master control group

# repeat 'noise' removal
mdt = fast_melt(control)
prevdt = mdt[, list(Prevalence = sum(count > 0), 
                     TotalCounts = sum(count)),
              by = TaxaID] # make simple table listing 'SampleID, TaxaID, and count' 
 
keepTaxa = prevdt[(Prevalence >= 3 & TotalCounts > 100), TaxaID] # Make list of OTUs to keep (cut-off determined 3/28 from histogram analysis)
controlPr = prune_taxa(keepTaxa, control) # Prune taxa from list

controlG <- tax_glom(controlPr, taxrank="Genus") # glom OTUs at the Genus level
ajh <- subset_samples(controlG, Age%in%c("A","J","H")) # subset out adults, hatchlings, and juveniles


adult <- subset_samples(controlG, Age=="A") # subset out adults
juv <- subset_samples(controlG, Age=="J") # subset out juveniles
hatch <- subset_samples(controlG, Age=="H") # subset out hatchlings
coc <- subset_samples(controlG, Age=="C") # subset out cocoons

ac <- subset_samples(controlG, Age%in%c("A","C")) # create group to compare adults and cocoons
ah <- subset_samples(controlG, Age%in%c("A","H")) # create group to compare adults and hatchlings
aj <- subset_samples(controlG, Age%in%c("A","J")) # create group to compare adults and juveniles
jh <- subset_samples(controlG, Age%in%c("J","H")) # create group to compare juveniles and hatchlings

############## fig1_NMDS #################
#library("phyloseq") # should already be loaded
#library("ggplot2") # should already be loaded
library(vegan)
library("plyr")

ajh.ord = ordinate(ajh, method = "MDS", distance = "bray")
plot_ordination(ajh, ajh.ord, type = "sample", color = "Age") + geom_point(size=3, alpha=0.75) + stat_ellipse(type = "t", level = 0.95, linetype = 2) # Add ellipse for 95% CI

############## fig1_NMDS #################

############## tbl1_log2fc #################
########## log2fold Change ##########
library("ggplot2") #packageVersion("ggplot2")
library("DESeq2") #packageVersion("DESeq2") # The DESeq2 model internally corrects for library size, so transformed or normalized values such as counts scaled by library size should not be used as input. #

gl <- c(ah,aj,jh) # define groups for comparisons
oldotu <- c() # create new empty list

for (group in c(gl)){
  kostic <- group # assign data to be processed
  namef <- capture.output(cat(levels(head(sample_data(kostic)$Age, 10)),sep=""))
  diagddsraw = phyloseq_to_deseq2(kostic, ~ Age) # assign variable for comparing groups

# calculate geometric means prior to estimate size factors
  gm_mean = function(x, na.rm=TRUE){exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))}
  geoMeans = apply(counts(diagddsraw), 1, gm_mean)
  diagdds = estimateSizeFactors(diagddsraw, geoMeans = geoMeans)
  diagdds2 = DESeq(diagdds, fitType="local")

  res = results(diagdds2)
  res = res[order(res$padj, na.last=NA), ]
  alpha = 0.01
  sigtab = res[(res$padj < alpha), ]
  sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(kostic)[rownames(sigtab), ], "matrix"))
  head(sigtab)

  resSig <- subset(sigtab,padj<0.05)
  resSig$TestGroup <- namef

# print to output file
  write.table(as.data.frame(resSig),file="stats.csv",append=TRUE, sep=",")
# write.csv(as.data.frame(resSig), file="05AHresults.csv")

  log2lim = 5 # cut-off (absolute) value for log2fc
  newotu = resSig[(abs(res$log2FoldChange) > log2lim), ] # isolate any otus with log2fc > lim
  oldotu <- rbind(oldotu, newotu) # append isolated otus to list

}
unotu <- unique(oldotu$Genus) # list of unique genera with significant log2fc
########## log2fold Change ##########

########## fig2_Box+Whisker Plot (Adult/Juvenile Interaction Groups) ##########
library(grid)

# Need to run log2fc first to produce unotu

sample_data(jtreat)$test = factor(sample_data(jtreat)$test, levels = c("Juvenile","+Water","+Rock","+Adults"))
inta <- subset_samples(jtreat, test%in%c("Juvenile","+Water","+Rock","+Adults"))
intaG <- tax_glom(inta, taxrank="Genus") # glom OTUs at the Genus level
intaPr <- subset_taxa(intaG, Genus%in%c(as.character(unotu)))
intaT <- transform_sample_counts(intaPr, function(x) x/sum(x)) # get abundance in %
ssint <- subset_taxa(intaT, Genus%in%c(as.character(unotu)))

inca <- subset_samples(contreat, Age%in%c("A","J","H"))
incaG <- tax_glom(inca, taxrank="Genus") # glom OTUs at the Genus level
incaPr <- subset_taxa(incaG, Genus%in%c(as.character(unotu)))
incaT <- transform_sample_counts(incaPr, function(x) x/sum(x)) # get abundance in %
ssinc <- subset_taxa(incaT, Genus%in%c(as.character(unotu)))

ph <- as.character(get_taxa_unique(ssint, "Phylum")) # compile list of phyla to examine

for (p in c(ph)){
  ssAPh <- subset_taxa(ssint, Phylum%in%c(p))
  ssBPh <- subset_taxa(ssinc, Phylum%in%c(p))
#  if(ntaxa(sscPh)>4){
#    wpng = ntaxa(sscPh) # if more than 4 taxa, plot width will be 1in/taxon
#  } else{
#    wpng = ntaxa(sscPh) + 1 # if less than 4 taxa, plot will be 1in/taxon + 1in
#  }

  datA <- psmelt(ssAPh) # create dataframe from phyloseq object
  datB <- psmelt(ssBPh) # create dataframe from phyloseq object

  datA$Genus <- as.character(datA$Genus) # convert Genus to a character vector from a factor because R
  datB$Genus <- as.character(datB$Genus) # convert Genus to a character vector from a factor because R

# VERTICAL boxplot + log y-scale + facet by age + x-labels vertical
  pA <- ggplot(datA, aes(x=test, y=Abundance, fill=test)) +
    ggtitle(paste(p,"determinant taxa")) + 
    geom_boxplot() +
    scale_y_log10(limits=c(.001,1)) + 
    facet_grid(~Genus) + 
    theme(strip.text=element_text(size=rel(.5)),axis.text.x=element_blank(),axis.title.x=element_blank()) +
    scale_fill_brewer(palette="Set1") 

# VERTICAL boxplot + log y-scale + facet by age + x-labels vertical
  pB <- ggplot(datB, aes(x=Age, y=Abundance, fill=Age)) +
    ggtitle("Controls") + 
    geom_boxplot() +
    scale_y_log10(limits=c(.001,1)) + 
    facet_grid(~Genus) + 
    theme(strip.text=element_text(size=rel(.5)),axis.text.x=element_blank(),axis.title.x=element_blank()) +
    scale_fill_brewer(palette="Set2")

  grid.newpage()
  grid.draw(rbind(ggplotGrob(pA), ggplotGrob(pB), size = "last"))
  ggsave(grid.draw(rbind(ggplotGrob(pA), ggplotGrob(pB), size = "last")),filename=paste("plot",p,".png",sep=""),width=8,height=4)
}
########## Box+Whisker Plot (Adult/Juvenile Interaction Groups) ##########

############## fig3_NMDS #################
#library("phyloseq") # should already be loaded
#library("ggplot2") # should already be loaded
library(vegan)
library("plyr")

sample_data(jh)$Da1F = factor(sample_data(jh)$Da1F, levels = c("none","R",0,1,2,4,7,14,38,39,40,45)) # 

jh.ord = ordinate(jh, method = "MDS", distance = "bray")
plot_ordination(jh, jh.ord, type = "sample", shape = "Age", color = "Da1F") + geom_point(size=3, alpha=0.75) + stat_ellipse(type = "t", level = 0.95, linetype = 2) + scale_colour_hue(h=c(0, 180)) # Add ellipse for 95% CI

############## fig3_NMDS #################
