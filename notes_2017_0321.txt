library("phyloseq") #packageVersion("phyloseq")
library("ggplot2") #packageVersion("ggplot2")
library("ape") #packageVersion("ape")
setwd("~/Desktop/2017_0321/")
taxdata <- read.csv("table_tax.csv", header = TRUE, row.names = 1) # reads csv file into data.frame with row names in column 1
taxmat <- as.matrix.data.frame(taxdata) # reads data.frame into matrix without converting to numbers
otudata <- read.csv("table_otu.csv", header = TRUE, row.names = 1)
otumat <- as.matrix.data.frame(otudata)
mapdata <- read.csv("table_map.csv", header = TRUE, row.names = 1)
mapmat <- as.matrix.data.frame(mapdata)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
MAP = sample_data(data.frame(mapdata)) #######
TREE = read.tree("Rep_Set_tree.tree")
physeq = phyloseq(OTU, TAX, MAP, TREE)

theme_set(theme_bw())
pal = "Set3"
scale_colour_discrete <-  function(palname=pal, ...){
  scale_colour_brewer(palette=palname, ...)
}
scale_fill_discrete <-  function(palname=pal, ...){
  scale_fill_brewer(palette=palname, ...)
}

physeqR <- physeq # Save original version of un-manipulated data
physeq <- prune_samples(sample_sums(physeq) > 5000, physeq) # keep only samples with >5000 reads

physeqH <- physeq # Save version of data with Halomonas included
halo <- subset_taxa(physeq, Family == "Halomonadaceae") # create list of Halomonadaceae in samples
physeq = prune_samples(sample_sums(halo)<=50, physeq) # Remove any samples with >= .5% Halomonadaceae (50/10000)

albumen <- subset_samples(physeq, SampleSite%in%c("Albumen")) # data set containing only cocoon albumen data

most_abundant_taxaA <- sort(taxa_sums(albumen), TRUE)[1:25] # Identify 25 most abundant taxa
pruneA <- prune_taxa(names(most_abundant_taxaA),albumen) # Create a subset of data including only most abundant taxa
most_abundant_taxaP <- sort(taxa_sums(physeq), TRUE)[1:25] # Identify 25 most abundant taxa
pruneP <- prune_taxa(names(most_abundant_taxaP),physeq) # Create a subset of data including only most abundant taxa

genus <- tax_glom(pruneA, taxrank = "Genus") # Combine OTUs at genus level

plot_bar(genus, fill = "Family") # simple bar plot

#### Cocoons sequenced on 3/16/16 have weird (almost all Rikenella) results ####

one <- subset_samples(albumen, !RunDate%in%c("2016_0316")) # remove 2016_0316 data
most_abundant_taxa <- sort(taxa_sums(one), TRUE)[1:25] # Identify 25 most abundant taxa
pruned <- prune_taxa(names(most_abundant_taxa),one) # Create a subset of data including only most abundant taxa
genus <- tax_glom(pruned, taxrank = "Genus") # Combine OTUs at genus level
plot_bar(genus, fill = "Family") # simple bar plot

transform <- transform_sample_counts(genus, function(OTU) OTU/sum(OTU) )
plot_bar(transform, fill="Genus")

#### No Rikenella or Aeromonas. Need to manipulate to include these ####
one <- subset_samples(albumen, !RunDate%in%c("2016_0316")) # remove 2016_0316 data
clip <- c(most_abundant_taxaA,most_abundant_taxaP) # combine most abundant taxa in cocoons and overall data set
pruned <- prune_taxa(names(clip),one) # Create a subset of data including only most abundant taxa
genus <- tax_glom(pruned, taxrank = "Genus") # Combine OTUs at genus level
#### The problem was that OTU13449 is the dominant Aeromonadaceae OTU, and it is not assigned a genus. Need to glom to Family ####
family <- tax_glom(pruned, taxrank = "Family") # Combine OTUs at family level

transform <- transform_sample_counts(family, function(OTU) OTU/sum(OTU) )
plot_bar(transform, fill="Family")

### Most OTUs from Sphingobacteriales, Saprospirales, and Rhizobiales ###

###########Cocoon Image###########
p <- plot_bar(transform, fill="Phylum") + expand_limits(y=c(0,1)) + labs(title = "Phylum")+ theme(text=element_text(size=rel(3)), axis.text.x=element_blank(),axis.title.x=element_blank(),legend.text=element_text(size=rel(3)),legend.title=element_blank(),plot.title=element_text(size = rel(3)))

alp = subset_taxa(transform, Class=="Alphaproteobacteria")
a <- plot_bar(alp, fill="Family") + expand_limits(y=c(0,1)) + labs(title = "Alphaproteobacteria")+ theme(text=element_text(size=rel(3)), axis.text.x=element_blank(),axis.title.x=element_blank(),legend.text=element_text(size=rel(3)),legend.title=element_blank(),plot.title=element_text(size = rel(3)))

bet = subset_taxa(transform, Class=="Betaproteobacteria")
b <- plot_bar(bet, fill="Family") + expand_limits(y=c(0,1)) + labs(title = "Betaproteobacteria")+ theme(text=element_text(size=rel(3)), axis.text.x=element_blank(),axis.title.x=element_blank(),legend.text=element_text(size=rel(3)),legend.title=element_blank(),plot.title=element_text(size = rel(3)))

gam = subset_taxa(transform, Class=="Gammaproteobacteria")
g <- plot_bar(gam, fill="Family") + expand_limits(y=c(0,1)) + labs(title = "Gammaproteobacteria")+ theme(text=element_text(size=rel(3)), axis.text.x=element_blank(),axis.title.x=element_blank(),legend.text=element_text(size=rel(3)),legend.title=element_blank(),plot.title=element_text(size = rel(3)))

bac = subset_taxa(transform, Phylum=="Bacteroidetes")
c <- plot_bar(bac, fill="Family") + expand_limits(y=c(0,1)) + labs(title = "Bacteroidetes")+ theme(text=element_text(size=rel(3)), axis.text.x=element_blank(),axis.title.x=element_blank(),legend.text=element_text(size=rel(3)),legend.title=element_blank(),plot.title=element_text(size = rel(3)))

pdf(file = "cocoons.pdf", width = 8, height = 12 )
multiplot(p,a,b,g,c) # define 'multiplot' before starting (see end of notes)
dev.off()
###########Cocoon Image###########

ILF <- subset_samples(physeq, SampleSite%in%c("ILF")) # Only look at ILF samples
clean <- subset_samples(ILF, !MealLot1%in%c("S-N3095","15B52072")) # Remove samples from contaminated blood lots
clean <- subset_samples(clean, !MealLot2%in%c("S-N3095","15B52072")) # Remove samples from contaminated blood lots
old <- subset_samples(clean, Age%in%c("A")) 
o.con <- subset_samples(old, !Treatment%in%c("Ana_Feed","MacroAdults"))
pruneO <- prune_taxa(names(clip),o.con) # Create a subset of data including only most abundant taxa
familyO <- tax_glom(pruneO, taxrank = "Family") 
transformO <- transform_sample_counts(familyO, function(OTU) OTU/sum(OTU) )
plot_bar(transformO, fill="Phylum") + expand_limits(y=c(0,1)) + labs(title = "Adults")+ theme(text=element_text(size=rel(3)), axis.text.x=element_blank(),axis.title.x=element_blank(),legend.text=element_text(size=rel(3)),legend.title=element_blank(),plot.title=element_text(size = rel(3)))

############ multiplot ############
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
################